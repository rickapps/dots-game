The top left square has id=0. The bottom right square has id=squareCount-1. Each square has four 
sides; Top, Right, Bottom, and Left. If the square is complete it has an owner of Player1 or Player2. 
All horizontal lines are numbered sequentially from the top left to the bottom right. The top segment 
of square zero is numbered zero, the top segment of square one is one, the bottom segment of square 
squareCount-1 is numbered (squareCount-1)+gameSize; Vertical lines are then numbered sequentially starting 
with the left side of square zero (The line id is squareCount+gameSize). However, vertical lines are not 
numbered sequentially all the 
way to the last column. Instead, the numbering ends at the right side of the square just before the 
last column. The vertical lines composing the outer right edge of the dot game board are not assigned numbers 
until all the other vertical lines are assigned. Then the right edge is numbered from top to bottom. 

/// x----x----x----x----x 
/// |  0 |  1 |  2 |  3 |    For 4x4 game board, gameSize is 4. squareCount is 16. Squares are numbered 0-15. 
/// x----x----x----x----x    Horizontal lines on top edge of game board are numbered 0-3. Horizontal lines on 
/// |  4 |  5 |  6 |  7 |    bottom edge of game board are numbered 16-19. Vertical lines on the left edge are 
/// x----x----x----x----x    numbered 20,24,28,32. Vertical lines on the right edge of the game board are numbered 
/// |  8 |  9 | 10 | 11 |    36,37,38,39. Vertical lines on the first row of the gameboard are numbered 20,21,22,23,36. 
/// x----x----x----x----x    The second row of vertical lines are numbered 24,25,26,27,37. The numbering scheme makes 
/// | 12 | 13 | 14 | 15 |    formulas for computing related squares and lines easier.  
/// x----x----x----x----x 
/// </summary>

     /// <summary>
    /// Obtain the line array index for the specified square side.
    /// </summary>
    /// <param name="square"></param>
    /// <param name="side"></param>
    /// <returns></returns>
    private int LineIndex(int square, Side side)
    {
        int index = 0;
        switch (side)
        {
            case Side.Top:
                index = square;
                break;
            case Side.Right:
                // There are two formulas depending on whether the square is on the right edge of the board or not.
                if ((square + 1) % this.squaresPerSide == 0)
                {
                    index = this.squareCount + ((square + 1) / this.squaresPerSide) + (this.squaresPerSide * (this.squaresPerSide + 1)) - 1;
                }
                else
                {
                    index = square + 1 + this.squaresPerSide * (this.squaresPerSide + 1);
                }

                break;
            case Side.Bottom:
                index = square + this.squaresPerSide;
                break;
            case Side.Left:
                index = square + (this.squaresPerSide * (this.squaresPerSide + 1));
                break;
        }

        return index;
    }

    main.py - 
    /new/ - Start a new game. Server requires size and theme. Generates lines, boxes, glevels, gthemes.
    /resume/ - resume existing game. Server requires size, theme, lines, and claims. Generates boxes, glevels, gthemes.
    /find/ - calculate best response to supplied line array. Server requires size and lines. Generates list of tuples (line, boxA, boxB) ...
    /verify/ - evaluate user move to determine what squares it completes. Server requires size, lines, and line. Generates a tuple (line, boxA, boxB)
    / - display startup screen. Server requires no input. Generates size, theme, and lines.
    server requires size, lines, 

    startup.html - does not display. Checks to see if a previous game is stored in localStorage. If so, initiates a POST /resume/ request. If not, initiates a POST /new/ request.

Start a new game. Return a web page depicting a blank gameboard of the specified size.
POST /new/
{
    glevel: size 
}
where size is a positive integer. A size of 3 means the gameboard will have 3 squares per side for a total of nine squares. A size of 10 specifies that the gameboard would contain 100 squares.

Resume a game in progress. Returns a web page depicting the specified gameboard. If lines[] and claims[] are all zeros, this would be the same as /new/.
POST /resume/
{
    size: size,
    lines: lines[],
    claims: claims[]
}
where size is the number of squares per side of the gameboard, 
lines[] indicates the dots the players have connectecd on the gameboard. A value of 1 means a line has been drawn. A value of 0 means the move is still available to a player. Lines are numbered according to the figure below.
claims[] indicates which squares are completed on the gameboard. A value of 0 means the square is incomplete. A value of 1 means the square is claimed by player 1, 2 claimed by player 2, etc. Squares are numbered according to the figure below.

Find the best move for the specified gameboard. Return a list of tuples: [(line, claimA, claim2), (line, claimA, claimB), ...]
POST /find/
{
    size: size,
    lines: lines[]
}

Validate a player's move. newline indicates the line the player wishes to draw. If the line is available, a tuple is returned: (line, box#, box#). Box# indicates which boxes were completed by the newline. If both are 0, no boxes were completed and the player's turn is over. If line is -1, the game is over.
POST /verify/
{
    size: size,
    lines: lines[],
    line: newline
}

Clears all dot game localStorage on the client machine. Players are redirected here in response to server errors. Once localStorage is cleared, a new game is started.
GET /reset/

GET /
The normal entry point to the game. Players are redirected to /new/ or /resume/ depending on localStorage values.
